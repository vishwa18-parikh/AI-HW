# -*- coding: utf-8 -*-
"""AI2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPuRSOvT6CUMikQQW-1eVv7kv2rDtPlU
"""

import numpy as np 
import pandas as pd
from keras.utils import to_categorical

dataset = pd.read_csv('/content/datasets_13720_18513_insurance.csv')
dataset

X = dataset.iloc[:,1:5].values
y = dataset.iloc[:,5].values

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
y1 = encoder.fit_transform(y)

#Y = pd.get_dummies(y1).values
#print(Y)

from sklearn.model_selection import train_test_split

X_train,X_test, y1_train,y1_test = train_test_split(X,y1,test_size=0.2, random_state=2)
#print(X_test)

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers  import SGD, Adam

model = Sequential()

model.add(Dense(10, input_shape=(4,), activation='tanh'))
model.add(Dense(10, activation='tanh'))
model.add(Dense(10, activation='tanh'))
model.add(Dense(1, activation='softmax'))

model.compile(Adam(lr=0.04), 'categorical_crossentropy', metrics=['accuracy'])

model.summary()

model.fit(X_train,y1_train,epochs = 100)
y_pred=model.predict(X_test)

"""New Code For Dataset

Library Importing
"""

import numpy as np
import pandas as pd
from keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import SGD,Adam

"""Load The Dataset"""

dataset = pd.read_csv('/content/datasets_13720_18513_insurance.csv')
dataset

"""Label Encoding"""

encoder = LabelEncoder()
dataset['sex'] = encoder.fit_transform(dataset['sex'])
dataset['smoker'] = encoder.fit_transform(dataset['smoker'])
dataset['region'] = encoder.fit_transform(dataset['region'])
dataset

"""Dataset Pre-Processing

Becuase Of stuck of loss

(x-mean/max)
"""

dataset['age'] = (dataset['age']-dataset['age'].mean())/dataset['age'].max()
dataset['sex'] = (dataset['sex']-dataset['sex'].mean())/dataset['sex'].max()
dataset['bmi'] = (dataset['bmi']-dataset['bmi'].mean())/dataset['bmi'].max()
dataset['children'] = (dataset['children']-dataset['children'].mean())/dataset['children'].max()
dataset['smoker'] = (dataset['smoker']-dataset['smoker'].mean())/dataset['smoker'].max()
dataset['region'] = (dataset['region']-dataset['region'].mean())/dataset['region'].max()
dataset['charges'] = (dataset['charges']-dataset['charges'].mean())/dataset['charges'].max()
x = dataset.iloc[:,0:6].values
y = dataset.iloc[:,6].values

'''dataset['age'] = (dataset['age']-dataset['age'].mean())/dataset['age'].sum()
dataset['sex'] = (dataset['sex']-dataset['sex'].mean())/dataset['sex'].sum()
dataset['bmi'] = (dataset['bmi']-dataset['bmi'].mean())/dataset['bmi'].sum()
dataset['children'] = (dataset['children']-dataset['children'].mean())/dataset['children'].sum()
dataset['smoker'] = (dataset['smoker']-dataset['smoker'].mean())/dataset['smoker'].sum()
dataset['region'] = (dataset['region']-dataset['region'].mean())/dataset['region'].sum()
dataset['charges'] = (dataset['charges']-dataset['charges'].mean())/dataset['charges'].sum()
x = dataset.iloc[:,0:6].values
y = dataset.iloc[:,6].values
'''

"""Split Data into train and test part"""

X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.3,random_state=1)

"""Model Building"""

model = Sequential()

model.add(Dense(300,input_shape=(6,),activation='relu'))

model.add(Dense(200,activation='relu'))
model.add(Dense(100,activation='relu'))
model.add(Dense(50,activation='relu'))
model.add(Dense(10,activation='relu'))
model.add(Dense(1,activation='linear'))

model.compile(Adam(lr=0.1),'mean_squared_error')

model.summary()

model.fit(X_train,Y_train,epochs=100)

Y_test

result = model.evaluate(X_test, Y_test)
print(result)
accuracy_ANN = 1 - result
print("Accuracy : {}".format(accuracy_ANN))

from sklearn.metrics import mean_squared_error,mean_absolute_error
pred_train= model.predict(X_train)
print(np.sqrt(mean_squared_error(Y_train,pred_train)))
print(mean_absolute_error(Y_train,pred_train))
print(mean_squared_error(Y_train,pred_train))

pred= model.predict(X_test)
print(np.sqrt(mean_squared_error(Y_test,pred))) 
print(mean_absolute_error(Y_test,pred))
print(mean_squared_error(Y_test,pred))

